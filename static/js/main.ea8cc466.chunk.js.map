{"version":3,"sources":["components/Users.jsx","App.js","reportWebVitals.js","index.js"],"names":["Users","useState","data","setData","repos","setRepos","value","setValue","SubmitHandler","e","a","preventDefault","fetch","users","json","usersJson","repos_url","reposJson","className","onSubmit","type","placeholder","onChange","target","onClick","avatar_url","src","alt","login","length","map","repo","href","html_url","name","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAsEeA,MAnEf,WAAkB,IAAD,EACSC,mBAAS,IADlB,mBACPC,EADO,KACFC,EADE,OAEYF,mBAAS,IAFrB,mBAEPG,EAFO,KAEAC,EAFA,OAGYJ,mBAAS,IAHrB,mBAGPK,EAHO,KAGAC,EAHA,KASPC,EAAa,uCAAE,WAAOC,GAAP,qBAAAC,EAAA,6DACjBD,EAAEE,iBADe,SAEGC,MAAM,gCAAD,OAAiCN,IAFzC,cAEXO,EAFW,gBAGOA,EAAMC,OAHb,cAGXC,EAHW,OAIjBZ,EAAQY,GAJS,UAMGH,MAAMG,EAAUC,WANnB,eAMXZ,EANW,iBAOOA,EAAMU,OAPb,QAOXG,EAPW,OAQjBZ,EAASY,GARQ,4CAAF,sDAanB,OACI,sBAAKC,UAAU,cAAf,UACA,qBAAKA,UAAU,QAAf,SACI,uBAAMC,SAAUX,EAAhB,UACA,uBACKF,MAAOA,EACPc,KAAK,OACLC,YAAY,iBACZC,SAzBO,SAAAb,GAChBF,EAASE,EAAEc,OAAOjB,UA0BV,wBAAQkB,QAAShB,EAAeY,KAAK,SAArC,yBAKP,sBAAKF,UAAU,cAAf,UACC,qBAAKA,UAAU,eAAf,SACGhB,EAAKuB,YAAc,qBAAKC,IAAKxB,EAAKuB,WAAYE,IAAKzB,EAAKuB,eAE5D,sBAAKP,UAAU,mBAAf,UACL,6CACA,sCACA,0CAEAhB,EAAK0B,MAAmC,sBAAKV,UAAU,0BAAf,UACpChB,EAAK0B,MAAuB,6BAAK1B,EAAK0B,QAAzB,qCACb1B,EAAKkB,KAAsB,6BAAKlB,EAAKkB,OAAzB,sCACXhB,EAAMyB,OAAS,EAAI,gDAA0B,6BAAKzB,EAAM0B,KAAI,SAAAC,GAAI,OAC9D,qBAAKb,UAAU,QAAf,SACE,mBAAGc,KAAMD,EAAKE,SAAUf,UAAU,eAAeK,OAAO,SAAxD,SACGQ,EAAKG,QAFkBH,EAAKI,YAJ3B,uDCvCFC,MARf,WACE,OACE,qBAAKlB,UAAU,MAAf,SACE,cAAC,EAAD,OCOSmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ea8cc466.chunk.js","sourcesContent":["import React,{useState} from 'react'\n// https://api.github.com/user\nimport './users.css'\nfunction Users() {\n    const[data,setData] = useState([])\n    const[repos, setRepos] = useState([]);\n    const[value, setValue] = useState(\"\");\n\n    const TargetValue = e =>{\n        setValue(e.target.value);\n    }\n\n    const SubmitHandler =async (e)=>{\n        e.preventDefault();\n        const users = await fetch(`https://api.github.com/users/${value}`);\n        const usersJson = await users.json();\n        setData(usersJson);\n        \n        const repos = await fetch(usersJson.repos_url);\n        const reposJson = await repos.json();\n        setRepos(reposJson);\n     \n}\n    \n\n    return (\n        <div className='Users__cont'>\n        <div className='Users'>\n            <form onSubmit={SubmitHandler}>\n            <input \n                 value={value}\n                 type=\"text\"\n                 placeholder=\"Search user...\"\n                 onChange={TargetValue}\n                 />\n                <button onClick={SubmitHandler} type=\"submit\">Search</button>\n            </form>\n               \n        </div>\n       \n         <div className=\"Users__info\">\n          <div className=\"Users__image\">\n            {data.avatar_url && <img src={data.avatar_url} alt={data.avatar_url}/>}\n          </div>\n         <div className=\"Users__info__top\">\n    <h3>Github Name</h3>\n    <h3>Type</h3>\n    <h3>Repos</h3>\n  </div>\n  {!data.login ? <h1>User Not Found</h1> :  <div className=\"Users__info__user__cont\">\n      {!data.login ? <h3>???</h3> : <h3>{data.login}</h3>}\n      {!data.type ? <h3>???</h3> : <h3>{data.type}</h3>}\n       {!repos.length > 0 ? <h3>No repos found</h3> : <h3>{repos.map(repo=>(\n           <div className=\"repos\" key={repo.id}>\n             <a href={repo.html_url} className=\"Users__links\" target=\"_blank\">\n               {repo.name}\n             </a>\n            \n           </div>\n       ))}</h3>}  \n     \n      \n      </div>}\n    </div>\n    </div>\n   \n\n    )\n}\n\nexport default Users\n","import './App.css';\nimport Users from './components/Users'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Users/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}